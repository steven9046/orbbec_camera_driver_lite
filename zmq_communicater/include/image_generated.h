// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_IMAGE_MESSAGE_H_
#define FLATBUFFERS_GENERATED_IMAGE_MESSAGE_H_

#include "flatbuffers/flatbuffers.h"

namespace Message {

struct Image;
struct ImageBuilder;
struct ImageT;

inline const flatbuffers::TypeTable *ImageTypeTable();

struct ImageT : public flatbuffers::NativeTable {
  typedef Image TableType;
  int32_t height;
  int32_t width;
  std::vector<uint8_t> data;
  ImageT()
      : height(0),
        width(0) {
  }
};

struct Image FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ImageT NativeTableType;
  typedef ImageBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ImageTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEIGHT = 4,
    VT_WIDTH = 6,
    VT_DATA = 8
  };
  int32_t height() const {
    return GetField<int32_t>(VT_HEIGHT, 0);
  }
  int32_t width() const {
    return GetField<int32_t>(VT_WIDTH, 0);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_HEIGHT) &&
           VerifyField<int32_t>(verifier, VT_WIDTH) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
  ImageT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ImageT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Image> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ImageT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ImageBuilder {
  typedef Image Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_height(int32_t height) {
    fbb_.AddElement<int32_t>(Image::VT_HEIGHT, height, 0);
  }
  void add_width(int32_t width) {
    fbb_.AddElement<int32_t>(Image::VT_WIDTH, width, 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Image::VT_DATA, data);
  }
  explicit ImageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ImageBuilder &operator=(const ImageBuilder &);
  flatbuffers::Offset<Image> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Image>(end);
    return o;
  }
};

inline flatbuffers::Offset<Image> CreateImage(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t height = 0,
    int32_t width = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  ImageBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_width(width);
  builder_.add_height(height);
  return builder_.Finish();
}

inline flatbuffers::Offset<Image> CreateImageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t height = 0,
    int32_t width = 0,
    const std::vector<uint8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return Message::CreateImage(
      _fbb,
      height,
      width,
      data__);
}

flatbuffers::Offset<Image> CreateImage(flatbuffers::FlatBufferBuilder &_fbb, const ImageT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ImageT *Image::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<Message::ImageT> _o = std::unique_ptr<Message::ImageT>(new ImageT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Image::UnPackTo(ImageT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = height(); _o->height = _e; }
  { auto _e = width(); _o->width = _e; }
  { auto _e = data(); if (_e) { _o->data.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->data[_i] = _e->Get(_i); } } }
}

inline flatbuffers::Offset<Image> Image::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ImageT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateImage(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Image> CreateImage(flatbuffers::FlatBufferBuilder &_fbb, const ImageT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ImageT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _height = _o->height;
  auto _width = _o->width;
  auto _data = _o->data.size() ? _fbb.CreateVector(_o->data) : 0;
  return Message::CreateImage(
      _fbb,
      _height,
      _width,
      _data);
}

inline const flatbuffers::TypeTable *ImageTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_UCHAR, 1, -1 }
  };
  static const char * const names[] = {
    "height",
    "width",
    "data"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const Message::Image *GetImage(const void *buf) {
  return flatbuffers::GetRoot<Message::Image>(buf);
}

inline const Message::Image *GetSizePrefixedImage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Message::Image>(buf);
}

inline bool VerifyImageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Message::Image>(nullptr);
}

inline bool VerifySizePrefixedImageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Message::Image>(nullptr);
}

inline void FinishImageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Message::Image> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedImageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Message::Image> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<Message::ImageT> UnPackImage(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<Message::ImageT>(GetImage(buf)->UnPack(res));
}

inline std::unique_ptr<Message::ImageT> UnPackSizePrefixedImage(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<Message::ImageT>(GetSizePrefixedImage(buf)->UnPack(res));
}

}  // namespace Message

#endif  // FLATBUFFERS_GENERATED_IMAGE_MESSAGE_H_
