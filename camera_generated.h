// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CAMERA_MESSAGE_H_
#define FLATBUFFERS_GENERATED_CAMERA_MESSAGE_H_

#include "flatbuffers/flatbuffers.h"

namespace Message {

struct Image;
struct ImageBuilder;
struct ImageT;

struct Camera;
struct CameraBuilder;
struct CameraT;

bool operator==(const ImageT &lhs, const ImageT &rhs);
bool operator!=(const ImageT &lhs, const ImageT &rhs);
bool operator==(const CameraT &lhs, const CameraT &rhs);
bool operator!=(const CameraT &lhs, const CameraT &rhs);

inline const flatbuffers::TypeTable *ImageTypeTable();

inline const flatbuffers::TypeTable *CameraTypeTable();

struct ImageT : public flatbuffers::NativeTable {
  typedef Image TableType;
  int32_t height;
  int32_t width;
  std::vector<uint8_t> data;
  ImageT()
      : height(0),
        width(0) {
  }
};

inline bool operator==(const ImageT &lhs, const ImageT &rhs) {
  return
      (lhs.height == rhs.height) &&
      (lhs.width == rhs.width) &&
      (lhs.data == rhs.data);
}

inline bool operator!=(const ImageT &lhs, const ImageT &rhs) {
    return !(lhs == rhs);
}


struct Image FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ImageT NativeTableType;
  typedef ImageBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ImageTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEIGHT = 4,
    VT_WIDTH = 6,
    VT_DATA = 8
  };
  int32_t height() const {
    return GetField<int32_t>(VT_HEIGHT, 0);
  }
  int32_t width() const {
    return GetField<int32_t>(VT_WIDTH, 0);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_HEIGHT) &&
           VerifyField<int32_t>(verifier, VT_WIDTH) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
  ImageT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ImageT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Image> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ImageT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ImageBuilder {
  typedef Image Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_height(int32_t height) {
    fbb_.AddElement<int32_t>(Image::VT_HEIGHT, height, 0);
  }
  void add_width(int32_t width) {
    fbb_.AddElement<int32_t>(Image::VT_WIDTH, width, 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Image::VT_DATA, data);
  }
  explicit ImageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ImageBuilder &operator=(const ImageBuilder &);
  flatbuffers::Offset<Image> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Image>(end);
    return o;
  }
};

inline flatbuffers::Offset<Image> CreateImage(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t height = 0,
    int32_t width = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  ImageBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_width(width);
  builder_.add_height(height);
  return builder_.Finish();
}

inline flatbuffers::Offset<Image> CreateImageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t height = 0,
    int32_t width = 0,
    const std::vector<uint8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return Message::CreateImage(
      _fbb,
      height,
      width,
      data__);
}

flatbuffers::Offset<Image> CreateImage(flatbuffers::FlatBufferBuilder &_fbb, const ImageT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct CameraT : public flatbuffers::NativeTable {
  typedef Camera TableType;
  std::string name;
  float fx;
  float fy;
  float cx;
  float cy;
  float k1;
  float k2;
  float k3;
  CameraT()
      : fx(0.0f),
        fy(0.0f),
        cx(0.0f),
        cy(0.0f),
        k1(0.0f),
        k2(0.0f),
        k3(0.0f) {
  }
};

inline bool operator==(const CameraT &lhs, const CameraT &rhs) {
  return
      (lhs.name == rhs.name) &&
      (lhs.fx == rhs.fx) &&
      (lhs.fy == rhs.fy) &&
      (lhs.cx == rhs.cx) &&
      (lhs.cy == rhs.cy) &&
      (lhs.k1 == rhs.k1) &&
      (lhs.k2 == rhs.k2) &&
      (lhs.k3 == rhs.k3);
}

inline bool operator!=(const CameraT &lhs, const CameraT &rhs) {
    return !(lhs == rhs);
}


struct Camera FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CameraT NativeTableType;
  typedef CameraBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return CameraTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_FX = 6,
    VT_FY = 8,
    VT_CX = 10,
    VT_CY = 12,
    VT_K1 = 14,
    VT_K2 = 16,
    VT_K3 = 18
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  float fx() const {
    return GetField<float>(VT_FX, 0.0f);
  }
  float fy() const {
    return GetField<float>(VT_FY, 0.0f);
  }
  float cx() const {
    return GetField<float>(VT_CX, 0.0f);
  }
  float cy() const {
    return GetField<float>(VT_CY, 0.0f);
  }
  float k1() const {
    return GetField<float>(VT_K1, 0.0f);
  }
  float k2() const {
    return GetField<float>(VT_K2, 0.0f);
  }
  float k3() const {
    return GetField<float>(VT_K3, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<float>(verifier, VT_FX) &&
           VerifyField<float>(verifier, VT_FY) &&
           VerifyField<float>(verifier, VT_CX) &&
           VerifyField<float>(verifier, VT_CY) &&
           VerifyField<float>(verifier, VT_K1) &&
           VerifyField<float>(verifier, VT_K2) &&
           VerifyField<float>(verifier, VT_K3) &&
           verifier.EndTable();
  }
  CameraT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CameraT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Camera> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CameraT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CameraBuilder {
  typedef Camera Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Camera::VT_NAME, name);
  }
  void add_fx(float fx) {
    fbb_.AddElement<float>(Camera::VT_FX, fx, 0.0f);
  }
  void add_fy(float fy) {
    fbb_.AddElement<float>(Camera::VT_FY, fy, 0.0f);
  }
  void add_cx(float cx) {
    fbb_.AddElement<float>(Camera::VT_CX, cx, 0.0f);
  }
  void add_cy(float cy) {
    fbb_.AddElement<float>(Camera::VT_CY, cy, 0.0f);
  }
  void add_k1(float k1) {
    fbb_.AddElement<float>(Camera::VT_K1, k1, 0.0f);
  }
  void add_k2(float k2) {
    fbb_.AddElement<float>(Camera::VT_K2, k2, 0.0f);
  }
  void add_k3(float k3) {
    fbb_.AddElement<float>(Camera::VT_K3, k3, 0.0f);
  }
  explicit CameraBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CameraBuilder &operator=(const CameraBuilder &);
  flatbuffers::Offset<Camera> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Camera>(end);
    return o;
  }
};

inline flatbuffers::Offset<Camera> CreateCamera(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    float fx = 0.0f,
    float fy = 0.0f,
    float cx = 0.0f,
    float cy = 0.0f,
    float k1 = 0.0f,
    float k2 = 0.0f,
    float k3 = 0.0f) {
  CameraBuilder builder_(_fbb);
  builder_.add_k3(k3);
  builder_.add_k2(k2);
  builder_.add_k1(k1);
  builder_.add_cy(cy);
  builder_.add_cx(cx);
  builder_.add_fy(fy);
  builder_.add_fx(fx);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Camera> CreateCameraDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    float fx = 0.0f,
    float fy = 0.0f,
    float cx = 0.0f,
    float cy = 0.0f,
    float k1 = 0.0f,
    float k2 = 0.0f,
    float k3 = 0.0f) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Message::CreateCamera(
      _fbb,
      name__,
      fx,
      fy,
      cx,
      cy,
      k1,
      k2,
      k3);
}

flatbuffers::Offset<Camera> CreateCamera(flatbuffers::FlatBufferBuilder &_fbb, const CameraT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ImageT *Image::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<Message::ImageT> _o = std::unique_ptr<Message::ImageT>(new ImageT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Image::UnPackTo(ImageT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = height(); _o->height = _e; }
  { auto _e = width(); _o->width = _e; }
  { auto _e = data(); if (_e) { _o->data.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->data[_i] = _e->Get(_i); } } }
}

inline flatbuffers::Offset<Image> Image::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ImageT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateImage(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Image> CreateImage(flatbuffers::FlatBufferBuilder &_fbb, const ImageT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ImageT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _height = _o->height;
  auto _width = _o->width;
  auto _data = _o->data.size() ? _fbb.CreateVector(_o->data) : 0;
  return Message::CreateImage(
      _fbb,
      _height,
      _width,
      _data);
}

inline CameraT *Camera::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<Message::CameraT> _o = std::unique_ptr<Message::CameraT>(new CameraT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Camera::UnPackTo(CameraT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = fx(); _o->fx = _e; }
  { auto _e = fy(); _o->fy = _e; }
  { auto _e = cx(); _o->cx = _e; }
  { auto _e = cy(); _o->cy = _e; }
  { auto _e = k1(); _o->k1 = _e; }
  { auto _e = k2(); _o->k2 = _e; }
  { auto _e = k3(); _o->k3 = _e; }
}

inline flatbuffers::Offset<Camera> Camera::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CameraT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCamera(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Camera> CreateCamera(flatbuffers::FlatBufferBuilder &_fbb, const CameraT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CameraT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _fx = _o->fx;
  auto _fy = _o->fy;
  auto _cx = _o->cx;
  auto _cy = _o->cy;
  auto _k1 = _o->k1;
  auto _k2 = _o->k2;
  auto _k3 = _o->k3;
  return Message::CreateCamera(
      _fbb,
      _name,
      _fx,
      _fy,
      _cx,
      _cy,
      _k1,
      _k2,
      _k3);
}

inline const flatbuffers::TypeTable *ImageTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_UCHAR, 1, -1 }
  };
  static const char * const names[] = {
    "height",
    "width",
    "data"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *CameraTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 }
  };
  static const char * const names[] = {
    "name",
    "fx",
    "fy",
    "cx",
    "cy",
    "k1",
    "k2",
    "k3"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 8, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const Message::Camera *GetCamera(const void *buf) {
  return flatbuffers::GetRoot<Message::Camera>(buf);
}

inline const Message::Camera *GetSizePrefixedCamera(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Message::Camera>(buf);
}

inline bool VerifyCameraBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Message::Camera>(nullptr);
}

inline bool VerifySizePrefixedCameraBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Message::Camera>(nullptr);
}

inline void FinishCameraBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Message::Camera> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCameraBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Message::Camera> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<Message::CameraT> UnPackCamera(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<Message::CameraT>(GetCamera(buf)->UnPack(res));
}

inline std::unique_ptr<Message::CameraT> UnPackSizePrefixedCamera(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<Message::CameraT>(GetSizePrefixedCamera(buf)->UnPack(res));
}

}  // namespace Message

#endif  // FLATBUFFERS_GENERATED_CAMERA_MESSAGE_H_
